@using Pogi.Models.LiveViewModels
@using Pogi.Entities

@model LiveMapHoleViewModel ;

<br />
@{
    ViewData["Title"] = "Map Hole";
}
<section class="container-fluid">
    <section class="row justify-content-start">
        <span class="col-3 px-1 mx-1 d-flex align-items-center">
            <small><strong>@Model.Tour.TourName</strong></small>
        </span>
        <ul class="nav col-9 row justify-content-start">
            <li class="nav-item mx-0">
                <a class="nav-link active" asp-controller="Live" asp-action="Score"
                   asp-route-TourId="@ViewBag.TourId" asp-route-TourDate="@ViewBag.TourDate"
                   asp-route-memberId="@ViewBag.memberId" asp-route-tGroup="@ViewBag.tGroup" asp-route-pGroup="@ViewBag.pGroup"
                   asp-route-sMemberId1="@ViewBag.sMemberId1" asp-route-sMemberId2="@ViewBag.sMemberId2"
                   asp-route-sMemberId3="@ViewBag.sMemberId3" asp-route-sMemberId4="@ViewBag.sMemberId4"
                   asp-route-posP1="@ViewBag.posP1" asp-route-posP2="@ViewBag.posP2"
                   asp-route-posP3="@ViewBag.posP3" asp-route-posP4="@ViewBag.posP4"
                   asp-route-tHole="@ViewBag.tHole">Score</a>
            </li>
            <li class="nav-item px-0 mx-0">
                <a class="nav-link " asp-controller="Live" asp-action="Leaderboard"
                   asp-route-TourId="@ViewBag.TourId" asp-route-TourDate="@ViewBag.TourDate"
                   asp-route-memberId="@ViewBag.memberId" asp-route-tGroup="@ViewBag.tGroup" asp-route-pGroup="@ViewBag.pGroup"
                   asp-route-sMemberId1="@ViewBag.sMemberId1" asp-route-sMemberId2="@ViewBag.sMemberId2"
                   asp-route-sMemberId3="@ViewBag.sMemberId3" asp-route-sMemberId4="@ViewBag.sMemberId4"
                   asp-route-posP1="@ViewBag.posP1" asp-route-posP2="@ViewBag.posP2"
                   asp-route-posP3="@ViewBag.posP3" asp-route-posP4="@ViewBag.posP4"
                   asp-route-tHole="@ViewBag.tHole">Leaders</a>
            </li>
            <li class="nav-item px-0 mx-0">
                <a class="nav-link" asp-area="" asp-controller="Live" asp-action="Index"
                   asp-route-posP1="@ViewBag.posP1" asp-route-posP2="@ViewBag.posP2"
                   asp-route-posP3="@ViewBag.posP3" asp-route-posP4="@ViewBag.posP4">Groups</a>
            </li>
        </ul>
    </section>

    <section class="container">
        <section class="row btn bg-warning text-dark d-block">
            Hole  @Model.Hole:&nbsp;
            <span id="msg" class=""></span>
        </section>
        <section class="row" id="map" style="height: 500px"></section>
        <section class="d-flex flex-nowrap row">
            <label id="prevHole" class="col btn btn-info text-light text-center py-2 px-2 mt-1 mx-1 mb-1 border">
                Prev Hole
            </label>
            <label id="refresh" class="col btn btn-info text-light text-center py-2 px-2 mt-1 mx-1 mb-1 border">
                Refresh
            </label>
            <label id="nextHole" class="col btn btn-info text-light text-center py-2 px-2 mt-1 mx-1 mb-1 border">
                Next Hole
            </label>
        </section>
    </section>
    <section>
        <input type="text" id="tHole" name="tHole" value="@ViewBag.tHole" hidden />
        <input type="text" id="lat" value="test1" hidden />
        <input type="text" id="lng" value="test2" hidden />
        <span>
            <a id="copyHref" class="nav-link " asp-controller="Live" asp-action="MapHole"
               asp-route-TourId="@ViewBag.TourId" asp-route-TourDate="@ViewBag.TourDate"
               asp-route-memberId="@ViewBag.memberId" asp-route-tGroup="@ViewBag.tGroup" asp-route-pGroup="@ViewBag.pGroup"
               asp-route-sMemberId1="@ViewBag.sMemberId1" asp-route-sMemberId2="@ViewBag.sMemberId2"
               asp-route-sMemberId3="@ViewBag.sMemberId3" asp-route-sMemberId4="@ViewBag.sMemberId4"
               asp-route-posP1="@ViewBag.posP1" asp-route-posP2="@ViewBag.posP2"
               asp-route-posP3="@ViewBag.posP3" asp-route-posP4="@ViewBag.posP4"></a>
        </span>
    </section>
    



    @section Scripts {


        <script src="https://polyfill.io/v3/polyfill.min.js?features=default">

        </script>
        <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBqYaBYbtWxo7HDPzBTGZVU-dGQ9yNAy80&callback=initMap&libraries=&v=weekly"
                defer>

        </script>

        <script>
   
            "use strict";

            var map;
            var gMarker;
            var lMarker;
            var pMarker;
            var infoWindow;
            
            var markersArray = [];
            var linesArray = [];

            function addMarker(lPosn, gPosn, map) {
                lMarker = new google.maps.Marker({
                    position: lPosn,
                    map: map,
                    icon: {
                       url: "https://maps.google.com/mapfiles/kml/pal3/icon28.png"
                    }
                });
                addLine(lPosn, gPosn, map);
                //console.info("pPosn.lat=" + pPosn.lat + ", pPosn.lng=" + pPosn.lng);
                //console.info("lPosn.lat=" + lPosn.lat + ", lPosn.lng=" + lPosn.lng);
                //console.info("gPosn.lat=" + gPosn.lat + ", gPosn.lng=" + gPosn.lng);
                var distance = haversine_distance(lMarker, gMarker);
               
                //document.getElementById('msg').innerHTML = "<strong>" + distance + " Yards</strong> to Center of Green";

                var bubbleContent = "<small>" + distance + " Yards to Green</small>";

                // Store the Marker position
                document.getElementById('lat').value = lPosn.lat;
                document.getElementById('lng').value = lPosn.lng;
                var lat = document.getElementById('lat').value;
                var lng = document.getElementById('lng').value;
                // console.info("Verifying stored lat=" + lat + ", lng=" + lng);


                var bubble = new google.maps.InfoWindow({
                    content: bubbleContent
                });
                bubble.open(map, lMarker);

                markersArray.push(lMarker);
               
            }
            function addLine(p1, p2, map) {
                let lToGLine = new google.maps.Polyline({
                    path: [p1, p2],
                    map: map,
                    strokeColor: "#00ff00",
                    strokeOpacity: .5,
                    strokeWeight: 2
                });
                linesArray.push(lToGLine);
            }

            function removeMarkers() {
                if (markersArray) {
                    for (var i = 0; i < markersArray.length; i++) {
                        markersArray[i].setMap(null);
                    }
                    markersArray.length = 0;
                }
            }
            function removeLines() {
                if (linesArray) {
                    for (var j = 0; j < linesArray.length; j++) {
                        linesArray[j].setMap(null);
                    }
                    linesArray.length = 0;
                }
            }

            function haversine_distance(mk1, mk2) {
                var R = 3958.8; // Radius of the Earth in miles
                var rlat1 = mk1.position.lat() * (Math.PI / 180); // Convert degrees to radians
                var rlat2 = mk2.position.lat() * (Math.PI / 180); // Convert degrees to radians
                var difflat = rlat2 - rlat1; // Radian difference (latitudes)
                var difflon = (mk2.position.lng() - mk1.position.lng()) * (Math.PI / 180); // Radian difference (longitudes)

                var d = Math.round(1760 * 2 * R * Math.asin(Math.sqrt(Math.sin(difflat / 2) * Math.sin(difflat / 2) + Math.cos(rlat1) * Math.cos(rlat2) * Math.sin(difflon / 2) * Math.sin(difflon / 2))));
                return Math.trunc(d);
            }

            function handleLocationError(browserHasGeolocation, infoWindow, pos) {
                infoWindow.setPosition(pos);
                infoWindow.setContent(
                    browserHasGeolocation
                        ? "Error: The Geolocation service failed."
                        : "Error: Your browser doesn't support geolocation."
                );
                infoWindow.open(map);
            }
            function markPlayer() {

                 if (navigator.geolocation) {
                            navigator.geolocation.getCurrentPosition(
                            position => {
                                const pos = {
                                    lat: position.coords.latitude,
                                    lng: position.coords.longitude
                                };
                                //infoWindow.setPosition(posn);
                                //infoWindow.setContent("Location found.");
                                //infoWindow.open(map);
                                //map.setCenter(posn);
                                //pPosn = { lat: posn.lat, lng: posn.lng };
                                    //console.info("Geo pPosn.lat=" + pPosn.lat + ", pPosn.lng=" + pPosn.lng);
                                    if (pMarker != undefined) {
                                        pMarker.setMap(null);
                                    }  
                                pMarker = new google.maps.Marker({
                                    position: pos,
                                    map: map,
                                    icon: {
                                        url: "https://maps.google.com/mapfiles/kml/shapes/golf.png"
                                    }
                                });
                                
                                    var distance = haversine_distance(pMarker, gMarker);
                                    

                                    if (lMarker != undefined) {
                                        let layupDistance = haversine_distance(lMarker, pMarker);
                                        //console.info("Layup Distance = " + layupDistance);
                                        
                                        //var layupBubble = new google.maps.InfoWindow({
                                        //    content: layupMessage
                                        //});
                                        //layupBubble.open(map, pMarker);

                                        var layupMessage = "<small>" + layupDistance + "/" + distance + " Yards</small>"
                                        document.getElementById('msg').innerHTML = "Green: <strong>" + distance + "</strong>"
                                            + " Layup: <strong>" + layupDistance + "</strong>";

                                        // console.info("at Geo player lat=" + pos.lat + ", lng=" + pos.lng);
                                        var mLat = parseFloat(document.getElementById('lat').value);
                                        var mLng = parseFloat(document.getElementById('lng').value);
                                        // console.info("at Geo, marker lat=" + mLat + ", lng=" + mLng);
                                        if (mLat != undefined && mLng != undefined && mLat != "test1" && mLng != "test2") {
                                            var mPosn = { lat: mLat, lng: mLng };
                                            // console.info("at Geo player lat=" + mPosn.lat + ", lng=" + mPosn.lng);
                                            var pPosn = { lat: pos.lat, lng: pos.lng };
                                            addLine(mPosn, pPosn, map);
                                        }



                                    }
                                    else {
                                        //console.info("lmarker undefined, setting only Green Yardage")
                                        document.getElementById('msg').innerHTML = "<strong>" + distance + " Yards</strong> to Green";
                                    }

                                     
                                    


                            },
                            () => {
                                handleLocationError(true, infoWindow, map.getCenter());
                            }
                    );

                }
                else {
                    // Browser doesn't support Geolocation
                    handleLocationError(false, infoWindow, map.getCenter());
                }
            }

            function initMap() {

                ////18
                //Lat = 40.463102;
                //Lng = -74.638960;
                //InitLat = 40.462028;
                //InitLng = -74.638374;
                //Hdg = 0;
                //Zoom = 18;

                var Lat = @Model.Lat;
                var Lng = @Model.Lng;
                var InitLat = @Model.InitLat;
                var InitLng = @Model.InitLng;
                var Zoom = @Model.Zoom;
                var Hdg = @Model.Hdg;

                var cPosn = { lat: InitLat, lng: InitLng };
                var gPosn = { lat: Lat, lng: Lng };
                let pPosn;
                map = new google.maps.Map(document.getElementById("map"), {
                    center: {
                        lat: InitLat,
                        lng: InitLng
                    },
                    zoom: Zoom,
                    streetViewControl: false,
                    mapTypeId: "satellite",
                    mapTypeControl: false,
                    heading: Hdg,
                    //minZoom: 18,
                    tilt: 45,
                    rotateControl: false,
                    rotateControlOptions: {
                        ControPosition: google.maps.ControlPosition.LEFT_TOP
                    }
                });

                //addMarker(cPosn, gPosn, map);
                gMarker = new google.maps.Marker({
                    position: gPosn,
                    map: map,
                    icon: {
                        url: "https://maps.google.com/mapfiles/kml/pal2/icon13.png"
                    }
                });

                //if (navigator.geolocation) {
                //    navigator.geolocation.getCurrentPosition(
                //        position => {
                //            const posn = {
                //                lat: position.coords.latitude,
                //                lng: position.coords.longitude
                //            };
                //            //infoWindow.setPosition(posn);
                //            //infoWindow.setContent("Location found.");
                //            //infoWindow.open(map);
                //            //map.setCenter(posn);
                //            pPosn = { lat: posn.lat, lng: posn.lng };
                //            console.info("Geo pPosn.lat=" + pPosn.lat + ", pPosn.lng=" + pPosn.lng);
                //            pMarker = new google.maps.Marker({
                //                position: posn,
                //                map: map,
                //                icon: {
                //                    url: "https://maps.google.com/mapfiles/kml/shapes/golf.png"
                //                }
                //            });
                //            var distance = haversine_distance(pMarker, gMarker);
                //            document.getElementById('msg').innerHTML = "<strong>" + distance + " Yards</strong> to Green";

                //        },
                //        () => {
                //            handleLocationError(true, infoWindow, map.getCenter());
                //        }
                //    );
                //} else {
                //    // Browser doesn't support Geolocation
                //    handleLocationError(false, infoWindow, map.getCenter());
                //}
                markPlayer();
                var lat = document.getElementById('lat').value;
                var lng = document.getElementById('lng').value;
                // console.info("After add Player Marker var=" + lat + ", lng=" + lng);

                //console.info("calling addMarker pPosn.lat=" + pPosn.lat + ", pPosn.lng=" + pPosn.lng);

                //addMarker(cPosn, gPosn, map);
              
                

                infoWindow = new google.maps.InfoWindow();


                                                           
                google.maps.event.addListener(map, 'click', function (event) {
                    let clickPos = event.latLng;

                    //infoWindow = new google.maps.InfoWindow({ position: event.latLng });
                    //infoWindow.setContent(event.latLng.toString());
                    //infoWindow.open(map);
                    let ccPos = { lat: clickPos.lat(), lng: clickPos.lng() };
                    //console.info("at click Listener, lat=" + clickPos.lat()+ ", lng=" + clickPos.lng());

                    removeMarkers();
                    removeLines();
                    addMarker(ccPos, gPosn, map);
                    markPlayer();
                                        

                });


               
            }
            
            

        </script>

        <script>

            $(document).ready(function () {
                console.info("MapHole Document Ready");

                $("#prevHole").click(function (){

                    var tHole = $("#tHole").val();
                    console.info("PrevHole clicked, current Hole = " + tHole);
                    tHole--;
                    if (tHole > 0) {
                        var href = $("#copyHref").attr("href");
                        console.info("prev hole=" + tHole + ", href=" + href);
                        var href2 = href + "&thole=" + tHole;
                        console.info("href2=" + href2);
                        $("#tHole").val(tHole);
                        window.location.href = href2;
                    }
    
                });
                $("#nextHole").click(function () {

                    var tHole = $("#tHole").val();
                    console.info("PrevHole clicked, current Hole = " + tHole);
                    tHole++;
                    if (tHole <= 18) {
                        var href = $("#copyHref").attr("href");
                        console.info("next hole=" + tHole + ", href=" + href);
                        var href2 = href + "&thole=" + tHole;
                        console.info("href2=" + href2);
                        $("#tHole").val(tHole);
                        window.location.href = href2;
                    }

                });
                $("#refresh").click(function () {
                    location.reload();
                });
            });

        </script>

    }
