@model Pogi.Models.LiveViewModels.LiveScoreViewModel
<br />
@{
    ViewData["Title"] = "Live";
    var sProtect = "";
    var pMessage = "";
    var postMessage = "Press gray btn to refresh scores from group";
    if (@ViewBag.pGroup != @ViewBag.tgroup )
    {
        sProtect = "disabled";
        pMessage = "Scoring disabled, only view for this group";
        if (@Model.User.RoleAdminRoot || @Model.User.RoleAdminScore) {
            sProtect = "";
            pMessage = "Scoring enabled by Admin right";
        }
    }

}
<section class="container-fluid">
    <section class="row justify-content-start">
        <span class="col-3 px-1 mx-1 d-flex align-items-center">
            <small><strong>@Model.Tour.TourName</strong></small>
        </span>
        <ul class="nav col-9 row justify-content-start">
            <li class="nav-item px-0 mx-0">
                <a class="nav-link active" href="#">Score</a>
            </li>
            <li class="nav-item px-0 mx-0">
                <a class="nav-link " asp-controller="Live" asp-action="Leaderboard"
                   asp-route-TourId="@ViewBag.TourId" asp-route-TourDate="@ViewBag.TourDate"
                   asp-route-memberId="@ViewBag.memberId" asp-route-tGroup="@ViewBag.tGroup" asp-route-pGroup="@ViewBag.pGroup"
                   asp-route-sMemberId1="@ViewBag.sMemberId1" asp-route-sMemberId2="@ViewBag.sMemberId2"
                   asp-route-sMemberId3="@ViewBag.sMemberId3" asp-route-sMemberId4="@ViewBag.sMemberId4">Leaders</a>
            </li>
            <li class="nav-item px-0 mx-0">
                <a class="nav-link" asp-area="" asp-controller="Live" asp-action="Index">Groups</a>
            </li>
        </ul>
    </section>
    <section class="row">

        <div class="col mx-0 px-0 align-self-center">
                <label id="prevHole" type="button" class="col btn btn btn-warning text-dark text-center py-3 mb-1 border">
                    Prev Hole
                </label>
        </div>
  
        <div class="col d-flex justify-content-center align-content-center bg-warning text-dark text-center py-1 mb-1 border">
            <row>
                <p id="cHole" class="col-12 m-0">Hole 00</p>
                <col class="w-100" />
                <p id="parOfHole" class="col-12 m-0 d-block"><small>Par 04, 350 yards</small></p>
            </row>
        </div>

        <div class="col mx-0 px-0  align-self-center">
                <label id="nextHole" type="button" class="col btn btn-warning text-dark text-center py-3 mb-1 border">
                    Next Hole
                </label>
         </div>

    </section>
    <section class="row bg-primary mb-1 align-items-center justify-content-center">
        <div class="col">
            <div class="row">
                <div class="col align-content-center justify-content-center">
                    <div class="row align-items-center">
                        <button id="setBirdie" type="button" @(sProtect) class="col setScore border-light btn btn-sm btn-primary">Birdie</button>
                    </div>
                    <div class="row align-items-center">
                        <button id="setEagle" type="button" @(sProtect) class="col setScore border-light btn btn-sm btn-primary">Eagle</i></button>
                    </div>
                    <div class="row align-items-center">
                        <button id="setOne" type="button" @(sProtect) class="col setScore border-light btn btn-sm btn-primary">One</button>
                    </div>
                </div>
                <button id="minusScore" type="button" @(sProtect) class="col setScore btn btn-lg btn-primary"><i class="fa fa-minus"></i></button>
            </div>
        </div>
        <div id="postScore" class="col btn btn btn-secondary text-center text-light border rounded font-weight-bold">
            
            <label id="scoreOfHole" class="h3 text-light m-0">99</label>
            <p id="pOfHole" class="h6 font-weight-light m-0 mb-1">Nestor</p>
        </div>
        <div class="col">
            <div class="row">
                <button id="plusScore" type="button" @(sProtect) class="col setScore btn btn-lg btn-primary"><i class="fa fa-plus"></i></button>
                <div class="col align-content-center justify-content-center">
                    <div class="row align-items-center">
                        <button id="setPar" type="button" @(sProtect) class="col setScore border-light btn btn-sm btn-primary">Par</button>
                    </div>
                    <div class="row align-items-center">
                        <button id="setBogey" type="button" @(sProtect) class="col setScore border-light btn btn-sm btn-primary">Bogey</i></button>
                    </div>
                    <div class="row align-items-center">
                        <button id="setDouble" type="button" @(sProtect) class="col setScore border-light btn btn-sm btn-primary">Double</button>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <section class="row align-items-center">
        <div id="outh-plyr" class="col-1 text-center text-light bg-dark border border-light px-0">Plyr</div>
        <div id="outh-1" class="outh col-1 text-center text-light bg-dark border border-light px-0">01</div>
        <div id="outh-2" class="outh col-1 text-center text-light bg-dark border border-light px-0">02</div>
        <div id="outh-3" class="outh col-1 text-center text-light bg-dark border border-light px-0">03</div>
        <div id="outh-4" class="outh col-1 text-center text-light bg-dark border border-light px-0">04</div>
        <div id="outh-5" class="outh col-1 text-center text-light bg-dark border border-light px-0">05</div>
        <div id="outh-6" class="outh col-1 text-center text-light bg-dark border border-light px-0">06</div>
        <div id="outh-7" class="outh col-1 text-center text-light bg-dark border border-light px-0">07</div>
        <div id="outh-8" class="outh col-1 text-center text-light bg-dark border border-light px-0">08</div>
        <div id="outh-9" class="outh col-1 text-center text-light bg-dark border border-light px-0">09</div>
        <div id="outh-sum" class="col-1 text-center text-light bg-dark border border-light px-0">Out</div>
        <div id="outh-rnd" aria-atomic="" class="col-1 text-center text-light bg-dark border border-light px-0">Rnd</div>
    </section>

    @{
        int p = 0;
        foreach (Member player in @Model.Players)
        {
            p++;
            string initials = Model.Players[p - 1].FirstName.Substring(0, 1)
            + Model.Players[p - 1].LastName.Substring(0, 1);

            <section class="row align-items-center" id="out@(p)">
                <div id="out@(p)-plyr" class="out@(p)-plyr col-1 text-center text-dark
                 bg-light border border-secondary px-0">@(initials)</div>
                <div id="out@(p)-1" class="out@(p) col-1 text-center text-dark bg-light border border-secondary px-0">
                    @(Model.Scores[p - 1].Hole01)
                </div>
                <div id="out@(p)-2" class="out@(p) col-1 text-center text-dark bg-light border border-secondary px-0">
                    @(Model.Scores[p - 1].Hole02)
                </div>
                <div id="out@(p)-3" class="out@(p) col-1 text-center text-dark bg-light border border-secondary px-0">
                    @(Model.Scores[p - 1].Hole03)
                </div>
                <div id="out@(p)-4" class="out@(p) col-1 text-center text-dark bg-light border border-secondary px-0">
                    @(Model.Scores[p - 1].Hole04)
                </div>
                <div id="out@(p)-5" class="out@(p) col-1 text-center text-dark bg-light border border-secondary px-0">
                    @(Model.Scores[p - 1].Hole05)
                </div>
                <div id="out@(p)-6" class="out@(p) col-1 text-center text-dark bg-light border border-secondary px-0">
                    @(Model.Scores[p - 1].Hole06)
                </div>
                <div id="out@(p)-7" class="out@(p) col-1 text-center text-dark bg-light border border-secondary px-0">
                    @(Model.Scores[p - 1].Hole07)
                </div>
                <div id="out@(p)-8" class="out@(p) col-1 text-center text-dark bg-light border border-secondary px-0">
                    @(Model.Scores[p - 1].Hole08)
                </div>
                <div id="out@(p)-9" class="out@(p) col-1 text-center text-dark bg-light border border-secondary px-0">
                    @(Model.Scores[p - 1].Hole09)
                </div>
                <div id="out@(p)-HoleOut" class="out@(p)-plyr col-1 text-center text-dark bg-light border border-secondary px-0">
                    
                </div>
                <div id="out@(p)-Rnd" class="out@(p)-plyr col-1 text-center text-dark bg-light border border-secondary px-0">
                    +00
                </div>
            </section>
        }
    }
    <section class="row align-items-center">
        <div id="inh-plyr" class="col-1 text-center text-light bg-dark border border-light px-0">Plyr</div>
        <div id="inh-1" class="inh col-1 text-center text-light bg-dark border border-light px-0">10</div>
        <div id="inh-2" class="inh col-1 text-center text-light bg-dark border border-light px-0">11</div>
        <div id="inh-3" class="inh col-1 text-center text-light bg-dark border border-light px-0">12</div>
        <div id="inh-4" class="inh col-1 text-center text-light bg-dark border border-light px-0">13</div>
        <div id="inh-5" class="inh col-1 text-center text-light bg-dark border border-light px-0">14</div>
        <div id="inh-6" class="inh col-1 text-center text-light bg-dark border border-light px-0">15</div>
        <div id="inh-7" class="inh col-1 text-center text-light bg-dark border border-light px-0">16</div>
        <div id="inh-8" class="inh col-1 text-center text-light bg-dark border border-light px-0">17</div>
        <div id="inh-9" class="inh col-1 text-center text-light bg-dark border border-light px-0">18</div>
        <div id="inh-sum" class="col-1 text-center text-light bg-dark border border-light px-0">In</div>
        <div id="inh-tot" class="col-1 text-center text-light bg-dark border border-light px-0">Tot</div>
    </section>
    @{
        p = 0;
        foreach (Member player in @Model.Players)
        {
            p++;
            string initials = Model.Players[p - 1].FirstName.Substring(0, 1)
            + Model.Players[p - 1].LastName.Substring(0, 1);

            <section class="row align-items-center" id="in@(p)">
                <div id="in@(p)-plyr" class="in@(p)-plyr col-1 text-center text-dark
                 bg-light border border-secondary px-0">@(initials)</div>
                <div id="in@(p)-1" class="in@(p) col-1 text-center text-dark bg-light border border-secondary px-0">
                    @(Model.Scores[p - 1].Hole10)
                </div>
                <div id="in@(p)-2" class="in@(p) col-1 text-center text-dark bg-light border border-secondary px-0">
                    @(Model.Scores[p - 1].Hole11)
                </div>
                <div id="in@(p)-3" class="in@(p) col-1 text-center text-dark bg-light border border-secondary px-0">
                    @(Model.Scores[p - 1].Hole12)
                </div>
                <div id="in@(p)-4" class="in@(p) col-1 text-center text-dark bg-light border border-secondary px-0">
                    @(Model.Scores[p - 1].Hole13)
                </div>
                <div id="in@(p)-5" class="in@(p) col-1 text-center text-dark bg-light border border-secondary px-0">
                    @(Model.Scores[p - 1].Hole14)
                </div>
                <div id="in@(p)-6" class="in@(p) col-1 text-center text-dark bg-light border border-secondary px-0">
                    @(Model.Scores[p - 1].Hole15)
                </div>
                <div id="in@(p)-7" class="in@(p) col-1 text-center text-dark bg-light border border-secondary px-0">
                    @(Model.Scores[p - 1].Hole16)
                </div>
                <div id="in@(p)-8" class="in@(p) col-1 text-center text-dark bg-light border border-secondary px-0">
                    @(Model.Scores[p - 1].Hole17)
                </div>
                <div id="in@(p)-9" class="in@(p) col-1 text-center text-dark bg-light border border-secondary px-0">
                    @(Model.Scores[p - 1].Hole18)
                </div>
                <div id="in@(p)-HoleIn" class="in@(p)-plyr col-1 text-center text-dark bg-light border border-secondary px-0">
                   
                </div>
                <div id="in@(p)-Tot" class="in@(p)-plyr col-1 text-center text-dark bg-light border border-secondary px-0">
                    
                </div>
            </section>
        }
    }


    <section class="row btn-group-toggle" data-toggle="buttons">
        @{p = 0; }
        @foreach (Member player in @Model.Players)
        {
            p++;
            <label id="btnP@(p)"class="col btn btn-info text-light text-center py-2 px-2 mt-2 mx-1 mb-1 border">
                <input type="radio" name="options" id="option1" autocomplete="off" />
                @player.FirstName
            </label>
        }
    </section>
    <section class="row mt-1 px-1">
        <p id="postMessage" class="h6 text-secondary">@(postMessage)</p>
        <p class="h5 text-warning">@(pMessage)</p>
    </section>

</section>

<section>

    <input type="text" id="par1" value="@Model.Course.Par01" hidden />
    <input type="text" id="par2" value="@Model.Course.Par02" hidden />
    <input type="text" id="par3" value="@Model.Course.Par03" hidden />
    <input type="text" id="par4" value="@Model.Course.Par04" hidden />
    <input type="text" id="par5" value="@Model.Course.Par05" hidden />
    <input type="text" id="par6" value="@Model.Course.Par06" hidden />
    <input type="text" id="par7" value="@Model.Course.Par07" hidden />
    <input type="text" id="par8" value="@Model.Course.Par08" hidden />
    <input type="text" id="par9" value="@Model.Course.Par09" hidden />
    <input type="text" id="par10" value="@Model.Course.Par10" hidden />
    <input type="text" id="par11" value="@Model.Course.Par11" hidden />
    <input type="text" id="par12" value="@Model.Course.Par12" hidden />
    <input type="text" id="par13" value="@Model.Course.Par13" hidden />
    <input type="text" id="par14" value="@Model.Course.Par14" hidden />
    <input type="text" id="par15" value="@Model.Course.Par15" hidden />
    <input type="text" id="par16" value="@Model.Course.Par16" hidden />
    <input type="text" id="par17" value="@Model.Course.Par17" hidden />
    <input type="text" id="par18" value="@Model.Course.Par18" hidden />
    <input type="text" id="pCnt" value="@Model.Scores.Count" hidden />
    <input type-"text" id="tPlayer" name="tPlayer" value="@Model.currPlayer" hidden />
    <input type-"text" id="tHole" name="tHole" value="@Model.nextHole" hidden />
    <input type="text" id="chgs1" value="N" hidden />
    <input type="text" id="chgs2" value="N" hidden />
    <input type="text" id="chgs3" value="N" hidden />
    <input type="text" id="chgs4" value="N" hidden />
    @for(int pp = 0; pp < @Model.Scores.Count; pp++) {
    <input type="text" id="sId@(pp+1)" value="@Model.Scores[pp].ScoreId" hidden />
    }

</section>

@section Scripts {

    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

<script>

    $(document).ready(function () {
        console.info("Scores Document Ready");
        var pCnt = $("#pCnt").val();
        //console.info.info("There are " + pCnt + " Players");

        scoreAll();

        var pOfM = $("#tPlayer").val();
        if (pOfM == "undefined" || pOfM == "") {
            //console.info.info("Defaulting pOfM");
            pOfM = "1";
        }
        //console.info.info("Current Player is " + pOfM);

        var hOfM = $("#tHole").val();
        if (hOfM == "undefined" || hOfM == "") {
            //console.info.info("Defaulting hOfM");
            hOfM = "1";
        }
        //console.info.info("Current Hole is " + hOfM);

        $("#prevPlay").click(function () {
            var pCnt = $("#pCnt").val();
            var p = $("#tPlayer").val();
            if (p > 1) {
                p--;
            }
            else {
                p = pCnt;
            }
                
            $("#btnP" + p).trigger("click");

        });

        $("#nextPlay").click(function () {
            var pCnt = $("#pCnt").val();
            var p = $("#tPlayer").val();
            if (p < pCnt) {
                p++;
            }
            else {
                p = 1;
            }
                irdies
            $("#btnP" + p).trigger("click");

        });
        
        $("#btnP1").click(function () {
            //console.info.info("Click event for btnP1");
            toggleRow(1, pCnt);
            displayScore();
            showBirdies();
        });
        $("#btnP2").click(function () {
            //console.info.info("Click event for btnP2");
            toggleRow(2, pCnt);
            displayScore();
            showBirdies();
        });
        $("#btnP3").click(function () {
            //console.info.info("Click event for btnP3");
            toggleRow(3, pCnt);
            displayScore();
            showBirdies();
        });
        $("#btnP4").click(function () {
            //console.info.info("Click event for btnP4");
            toggleRow(4, pCnt);
            displayScore();
            showBirdies();
        });

        $("#prevHole").click(function() {

            var hh = parseInt($("#tHole").val());
            if (hh > 1) {
                hh = hh - 1;
                selectHole(hh);
                displayScore();
                hideZeroes();
                showBirdies();
            }

        });
        $("#nextHole").click(function () {

            var hh = parseInt($("#tHole").val());
            if (hh < 18) {
                hh = hh + 1;
                selectHole(hh);
                displayScore();
                hideZeroes();
                showBirdies();
        }

        });

        $("#minusScore").click(function () {
            var score = getScore();
            //console.info.info("Minus Score before = " + score);
            if (score == 0) {
                var parOfHole = getParOfHole();
                //console.info.info("Score was zero, setting initially to par");
                score = parOfHole;
            }
            else if (score > 1) {
                score--;
            }
            //console.info.info("Minus Score computed = " + score);
            setScore(score);
         });

        $("#plusScore").click(function () {
            var score = getScore();
            //console.info.info("Plus Score before = " + score);
            if (score == 0) {
                var parOfHole = getParOfHole();
                //console.info.info("Score was zero, setting initially to par");
                score = parOfHole;
            }
            else if (score < 15) {
                score++;
            }
            //console.info.info("Plus Score computed = " + score);
            setScore(score);
        });

        $("#setPar").click(function () {
            var parOfHole = getParOfHole();
            var score = parOfHole;
            setScore(score);
        });

        $("#setBogey").click(function () {
            var parOfHole = getParOfHole();
            var score = parOfHole;
            score++;
            setScore(score);
        });

        $("#setDouble").click(function () {
            var parOfHole = getParOfHole();
            var score = parOfHole;
            score++;score++;
            setScore(score);
        });

        $("#setBirdie").click(function () {
            var parOfHole = getParOfHole();
            var score = parOfHole;
            score--;
            setScore(score);
        });

        $("#setEagle").click(function () {
            var parOfHole = getParOfHole();
            var score = parOfHole;
            score--; score--;
            setScore(score);
        });

        $("#setOne").click(function () {
            var score = 1;
            setScore(score);
        });

        $("#postScore").click(function () {
            if (testChg() == "Y") {
                postAll();
                $("#postScore").removeClass("btn-danger");
                $("#postScore").addClass("btn-secondary");
                $("#postMessage").text("Press gray btn to refresh scores from group");
                $("#postMessage").addClass("text-secondary");
                $("#postMessage").removeClass("text-danger");
                allChgOff();
            }
            else {
                postAll();
            }
        });

        $(".out1, .out2, .out3, .out4, .in1, .in2, .in3, .in4").click(function () {
            var id = $(this).attr("id");
            //console.info("Hole clicked at id=" + id);
            var pOfM;
            var hOfM;
            if (id.substr(0, 3) == "out") {
                pOfM = id.substr(3, 1);
                hOfM = id.substr(5, 1);
                //console.info("out pOfM=" + pOfM + ", hOfM=" + hOfM);
            }
            else {
                pOfM = id.substr(2, 1);
                hOfM = parseInt(id.substr(4, 1)) + 9;
                //console.info("pOfM=" + pOfM + ", hOfM=" + hOfM);
            }
            //$("#tPlayer").val(pOfM);
            //$("#tHole").val(hOfM);

            var pCnt = $("#pCnt").val();

            $("#btnP" + pOfM).trigger("click");
            selectHole(hOfM);
            displayScore();
            hideZeroes();
            showBirdies();
           
        });


        $("#btnP" + pOfM).trigger("click");
   

        selectHole(hOfM);
        displayScore();
        hideZeroes();
        showBirdies();

    }); 

    function showBirdies() {

        console.info("showBirdies invoked");
        $(".out1, .out2, .out3, .out4, .in1, .in2, .in3, .in4").each(function () {
            if ($(this).text().trim() > "0") {

                var id = $(this).attr("id");
                //console.info("Show Birdies at id=" + id);
                var pOfM;
                var hOfM;
                if (id.substr(0, 3) == "out") {
                    pOfM = id.substr(3, 1);
                    hOfM = id.substr(5, 1);
                    //console.info("out pOfM=" + pOfM + ", hOfM=" + hOfM);
                }
                else {
                    pOfM = id.substr(2, 1);
                    hOfM = parseInt(id.substr(4, 1)) + 9;
                    //console.info("pOfM=" + pOfM + ", hOfM=" + hOfM);
                }
                var parOfHole = $("#par" + hOfM).val();
                var scoreOfHole = $(this).text().trim();
                if (scoreOfHole < parOfHole) {
                    if ($("#" + id).hasClass("bg-primary")) {
                        $("#" + id).removeClass("bg-success")
                        $("#" + id).removeClass("text-light")
                        $("#" + id).addClass("text-success");
                    }
                    else {
                        $("#" + id).removeClass("bg-secondary");
                        $("#" + id).removeClass("bg-primary");
                        $("#" + id).removeClass("bg-light");
                        $("#" + id).addClass("bg-success");
                        // Make pars that are not primary always text-light
                        $("#" + id).removeClass("text-dark");
                        $("#" + id).addClass("text-light")
                    }
                }
                else {
                    if ($("#" + id).hasClass("bg-primary")) {
                        $("#" + id).removeClass("text-success");
                        $("#" + id).addClass("text-light");
                    }
                    else {
                        
                        $("#" + id).removeClass("bg-success");
                        var pOfM2 = $("#tPlayer").val()
                        if (pOfM == pOfM2) {
                            $("#" + id).addClass("bg-secondary");
                            $("#" + id).addClass("text-light");
                        }
                        else {
                            $("#" + id).addClass("text-dark");
                        }

                    }
                }

            }
        });
    }
            

    function hideZeroes() {

        //console.info("HideZeroes invoked");
            $(".out1, .out2, .out3, .out4, .in1, .in2, .in3, .in4").each(function () {
            if ($(this).text().trim() == "0") {
                if ($(this).hasClass("bg-secondary")) {
                    $(this).removeClass("text-light");
                    $(this).removeClass("text-primary");
                    $(this).removeClass("text-dark");
                    $(this).addClass("text-secondary");
                }
                if ($(this).hasClass("bg-primary")) {
                    $(this).removeClass("text-light");
                    $(this).removeClass("text-secondary");
                    $(this).removeClass("text-dark");
                    $(this).addClass("text-light");
                }
                if ($(this).hasClass("bg-light")) {
                    $(this).removeClass("text-secondary");
                    $(this).removeClass("text-primary");
                    $(this).removeClass("text-dark");
                    $(this).addClass("text-light");
                }
            }
        });

        }
    
        function postAll() {
            //console.info.info("Entering postAll");
            var pCnt = $("#pCnt").val();
            var i;
            for (i = 1; i <= pCnt; i++) {
                if (getChg(i) == "Y") {
                    //console.info.info("Posting Changes for Player " + i);
                    postScore(i);
                }
                else {
                    refreshScore(i);
                }
            }
            //console.info("postAll calling showBirdies");
            //showBirdies();
            //console.info("Exiting postAll");
        }

        function selectHole(hOfM) {

            $(getScoreId()).removeClass("bg-primary")
            $(getScoreId()).removeClass("bg-success");
            $(getScoreId()).removeClass("text-success");
            $(getScoreId()).addClass("bg-secondary");

            var iH = hOfM;
            $("#tHole").val(iH);

            //console.info.info("Highlighting Hole " + iH);
            $(".inh").removeClass("bg-info");
            $(".outh").removeClass("bg-info");
            $(".inh").addClass("bg-dark");
            $(".outh").addClass("bg-dark");

            if (iH > 9) {
                var inH = iH - 9;
                var inId = "#inh-" + inH;
                //console.info.info("Toggling inId=" + inId);
                $(inId).removeClass("bg-dark");
                $(inId).addClass("bg-info");
                $("#cHole").text('Hole #' + iH);
            }
            else {
                var outH = iH;
                var outId = "#outh-" + outH 
                //console.info.info("Toggling outId=" + outId);
                $(outId).removeClass("bg-dark");
                $(outId).addClass("bg-info");
                $("#cHole").text("Hole #0" + outH);
            }
            // get Par of Hole
            var parOfHole = $("#par" + iH).val();
            $("#parOfHole").text("Par " + parOfHole);
         

            $(getScoreId()).removeClass("bg-secondary");
            $(getScoreId()).addClass("bg-primary");
              

        }

        function getPlayerName() {

            var pOfM = $("#tPlayer").val();
            var pId = "#btnP" + pOfM;
            var playerName = $(pId).text().trim();
            //console.info.info("Player " + pOfM + " is " + playerName);
            return playerName;
        }

        function getParOfHole() {
            // get current Hole
            var hole = $("#tHole").val();
            var parOfHole = $("#par" + hole).val();
            return parOfHole;
        }

        function getScore() {

            var scoreId = getScoreId();
            var score = $(scoreId).text().trim();
            return score;
        }

        function setScore(score) {

            var scoreId = getScoreId();
            $(scoreId).text(score);
            chgOnCurrent();
            displayScore();
            scoreRow();
            showBirdies();
            
            return;
        }

        function displayScore() {

            var scoreId = getScoreId();
            var score = $(scoreId).text().trim();
            //console.info.info("Setting Score to " + score);
            $("#scoreOfHole").text(score);

            if (testChg() == "Y") {
                $("#postScore").removeClass("btn-secondary");
                $("#postScore").addClass("btn-danger");

            }
            else {
                $("#postScore").removeClass("btn-danger");
                $("#postScore").addClass("btn-secondary");
            }

        }
        
        function getsId(p) {

            var sId = $("#sId" + p).val();
            return sId;
        }   

        function getScoreId() {

            var pOfM = $("#tPlayer").val();
            var hOfM = $("#tHole").val();
            //console.info.info("Getting Score Id of Player " + pOfM + ", Hole " + hOfM);

            var idOfScore;
            if (hOfM > 9) {
                var inH = hOfM - 9;
                idOfScore = "#in" + pOfM + "-" + inH;
            }
            else {
                var outH = hOfM;
                idOfScore = "#out" + pOfM + "-" + outH;
            }
            //console.info.info("Id of Score = " + idOfScore + ", value = " + $(idOfScore).text().trim());
            return idOfScore;
        }   
        function toggleRow(p, pCnt) {

            $(getScoreId()).removeClass("bg-primary");
            $(getScoreId()).removeClass("bg-success");
            $(getScoreId()).removeClass("text-success");

            var y;
            for (y = 1; y <= pCnt; y++) {
                $(".in" + y).removeClass("bg-success");
                $(".out" + y).removeClass("bg-success");

                if (y == p) {
                    $(".out"+ y + "-plyr").removeClass("bg-light");
                    $(".out"+ y + "-plyr").removeClass("text-dark");
                    $(".in"+ y + "-plyr").removeClass("bg-light");
                    $(".in" + y + "-plyr").removeClass("text-dark");

                    $(".out"+ y + "-plyr").addClass("bg-info");
                    $(".out"+ y + "-plyr").addClass("text-light");
                    $(".in"+ y + "-plyr").addClass("bg-info");
                    $(".in" + y + "-plyr").addClass("text-light");

                    $(".in" + y).addClass("border-light");
                    $(".out" + y).addClass("border-light");
                    $(".in" + y).removeClass("border-secondary");
                    $(".out" + y).removeClass("border-secondary");

                    $(".in" + y).removeClass("bg-light");
                    $(".out" + y).removeClass("bg-light");
                    $(".in" + y).addClass("bg-secondary");
                    $(".out" + y).addClass("bg-secondary");

                    $(".in" + y).removeClass("text-dark");
                    $(".out" + y).removeClass("text-dark");
                    $(".in" + y).addClass("text-light");
                    $(".out" + y).addClass("text-light");


                }
                else {
                    $(".out"+ y + "-plyr").addClass("bg-light");
                    $(".out"+ y + "-plyr").addClass("text-dark");
                    $(".in"+ y + "-plyr").addClass("bg-light");
                    $(".in" + y + "-plyr").addClass("text-dark");

                    $(".out"+ y + "-plyr").removeClass("bg-info");
                    $(".out"+ y + "-plyr").removeClass("text-light");
                    $(".in"+ y + "-plyr").removeClass("bg-info");
                    $(".in" + y + "-plyr").removeClass("text-light");

                    $(".in" + y).removeClass("border-light");
                    $(".out" + y).removeClass("border-light");
                    $(".in" + y).addClass("border-secondary");
                    $(".out" + y).addClass("border-secondary");

                    $(".in" + y).removeClass("bg-secondary");
                    $(".out" + y).removeClass("bg-secondary");
                    $(".in" + y).addClass("bg-light");
                    $(".out" + y).addClass("bg-light")

                    $(".in" + y).removeClass("text-light");
                    $(".out" + y).removeClass("text-light");
                    $(".in" + y).addClass("text-dark");
                    $(".out" + y).addClass("text-dark");

                }
            }
            $("#tPlayer").val(p);

            $(getScoreId()).removeClass("bg-secondary");
            $(getScoreId()).addClass("bg-primary");

            $("#pOfHole").text(getPlayerName);

            hideZeroes();

        }
        function scoreAll() {
            var pCnt = $("#pCnt").val();
            var i;
            for (i = 1; i <= pCnt; i++) {
                scoreTotal(i);
            }
        }

        function scoreRow() {
            var pOfM = $("#tPlayer").val();
            scoreTotal(pOfM);
        }

        function scoreTotal(p) {


            console.info("Computing Totals for Player " + p)

            var pars = new Array(18);
            var x;
            for (x = 1; x <= 18; x++) {
                pars[x] = $("#par" + x).val();
            }

            var totOut = 0;
            var rnd = 0;
            var hole = 0;
            $(".out" + p).each(function () {
                hole++;
                var holeScore = parseInt($(this).text());
                totOut = totOut + holeScore;
                if (holeScore > 0) {
                    rnd = rnd + holeScore - pars[hole];
                }
            });
            //console.info.info("Player " + p + " Out: " + totOut);

            var totIn = 0;
            $(".in" + p).each(function () {
                hole++;
                var holeScore = parseInt($(this).text());
                totIn = totIn + holeScore;
                if (holeScore > 0) {
                    rnd = rnd + holeScore - pars[hole];
                }
            });
            //console.info.info("Player " + p + " In: " + totIn);

            var total = totOut + totIn;
            //console.info.info("Player " + p + " Rnd: " + rnd);
            //console.info.info("Player " + p + " Total: " + total);

            var rndSign = "";
            if (rnd > 0) {
                rndSign = "+";
            }
            $("#out" + p + "-HoleOut").text(totOut);
            $("#out" + p + "-Rnd").text(rndSign+rnd);
            $("#in" + p + "-HoleIn").text(totIn);
            $("#in" + p + "-Tot").text(total);
        }

    
    function testChg() {

        var pCnt = $("#pCnt").val();
        var i;
        var chgInd = "N"
        for (i = 1; i <= pCnt; i++) {
            if (getChg(i) == "Y") {
                chgInd = "Y";
            }
        }
        //console.info.info("testChg for all=" + chgInd);
        if (chgInd == "Y") {
            $("#postMessage").text("Press red button to submit and refresh");
            $("#postMessage").addClass("text-danger");
            $("#postMessage").removeClass("text-secondary");

        }
        return chgInd;
    }

    function allChgOff() {

        //console.info.info("Clearing Changes");
        var pCnt = $("#pCnt").val();
        var i;
        for (i = 1; i <= pCnt; i++) {
            chgOff(i);
        }
    }

    function getChg(s) {

        var chgInd = $("#chgs" + s).val();
        if (chgInd == "undefined") {
            return "N";
        }
        //console.info.info("returning chgInd for player " + s + "=" + chgInd);
        return chgInd;
    }

    function chgOnCurrent() {
        var pOfM = $("#tPlayer").val();
        chgOn(pOfM);
    }

    function chgOn(s) {
        //console.info.info("Turning on chg ind for player " + s);
        $("#chgs" + s).val("Y");
    }
    function chgOff(s) {
        $("#chgs" + s).val("N");
    }

    function postScore(p) {
        console.info("Postscore for player " + p);
        scoreTotal(p);
        var url = "/api/scores/" + getsId(p);
        //console.info.info("postScore calling " + url);
        var scoreId = $("#scoreId" + p).val();
        var hole01 = $("#out" + p + "-1").text();
        var hole02 = $("#out" + p + "-2").text();
        var hole03 = $("#out" + p + "-3").text();
        var hole04 = $("#out" + p + "-4").text();
        var hole05 = $("#out" + p + "-5").text();
        var hole06 = $("#out" + p + "-6").text();
        var hole07 = $("#out" + p + "-7").text();
        var hole08 = $("#out" + p + "-8").text();
        var hole09 = $("#out" + p + "-9").text();
        var hole10 = $("#in" + p + "-1").text();
        var hole11 = $("#in" + p + "-2").text();
        var hole12 = $("#in" + p + "-3").text();
        var hole13 = $("#in" + p + "-4").text();
        var hole14 = $("#in" + p + "-5").text();
        var hole15 = $("#in" + p + "-6").text();
        var hole16 = $("#in" + p + "-7").text();
        var hole17 = $("#in" + p + "-8").text();
        var hole18 = $("#in" + p + "-9").text();
        var holeOut = $("#out" + p + "-HoleOut").text();
        var holeIn = $("#in" + p + "-HoleIn").text();
        var holeTotal = $("#in" + p + "-Tot").text();
        var holeRnd = $("#out" + p + "-Rnd").text(); 

        var sendInfo = {
            scoreId: scoreId,
            hole01: hole01,
            hole02: hole02,
            hole03: hole03,
            hole04: hole04,
            hole05: hole05,
            hole06: hole06,
            hole07: hole07,
            hole08: hole08,
            hole09: hole09,
            hole10: hole10,
            hole11: hole11,
            hole12: hole12,
            hole13: hole13,
            hole14: hole14,
            hole15: hole15,
            hole16: hole16,
            hole17: hole17,
            hole18: hole18,
            holeOut: holeOut,
            holeIn: holeIn,
            holeTotal: holeTotal,
            round : holeRnd
        };
        var jSendInfo = JSON.stringify(sendInfo);
        //console.info.info("postScore calling with " + jSendInfo);

        $.ajax({
            type: "PUT",
            url: url,
            dataType: "json",               
            contentType: "application/json",
            success: function (msg) {
                if (msg) {
                    alert("Score Id " + scoreId + " was updated!");
                    location.reload(true);
                } else {
                    alert("Cannot update score Id " + scoreId);
                }
            },
            data: jSendInfo
        });

    }
    function refreshScore(p) {

        console.info("Refresh Score entered for player " + p);

        var url = "/api/scores/" + getsId(p)
        //console.info("Calling GET, url=" + url);
        $.ajax({
            type: "GET",
            url: url,
            dataType: "json",
            success: function (data,status,xhr) {
                //console.info("Return from GET is success, status=" + status);
                console.info("Return from GET is success");
                $("#out" + p + "-1").text(data.score.hole01);
                $("#out" + p + "-2").text(data.score.hole02);
                $("#out" + p + "-3").text(data.score.hole03);
                $("#out" + p + "-4").text(data.score.hole04);
                $("#out" + p + "-5").text(data.score.hole05);
                $("#out" + p + "-6").text(data.score.hole06);
                $("#out" + p + "-7").text(data.score.hole07);
                $("#out" + p + "-8").text(data.score.hole08);
                $("#out" + p + "-9").text(data.score.hole09);
                $("#in" + p + "-1").text(data.score.hole10);
                $("#in" + p + "-2").text(data.score.hole11);
                $("#in" + p + "-3").text(data.score.hole12);
                $("#in" + p + "-4").text(data.score.hole13);
                $("#in" + p + "-5").text(data.score.hole14);
                $("#in" + p + "-6").text(data.score.hole15);
                $("#in" + p + "-7").text(data.score.hole16);
                $("#in" + p + "-8").text(data.score.hole17);
                $("#in" + p + "-9").text(data.score.hole18);
                scoreTotal(p);
                showBirdies();
            },


        })
            .done(function (data) {
                console.info("Return from GET is done");
            })
            .fail(function (jqXHR, textStatus, errorThrown) {
                console.info("Return from GET is fail, status=" + textStatus);


            });

    }
    

</script>

}
